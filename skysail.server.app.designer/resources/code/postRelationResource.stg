postRelationResource(application, entity, relation) ::= <<
package $application.packageName$;

import java.util.List;

import io.skysail.server.queryfilter.Filter;
import io.skysail.server.queryfilter.pagination.Pagination;
import io.skysail.server.restlet.resources.PostRelationResource;

public class Post$entity.simpleName$s$relation.targetEntityModel.simpleName$RelationResource extends PostRelationResource<$entity.className$, $relation.targetEntityModel.className$> {

    private $application.name$Application app;
    private $relation.targetEntityModel.simpleName$Repository repo;
    //private UserRepository userRepo;

    public Post$entity.simpleName$s$relation.targetEntityModel.simpleName$RelationResource() {
        // addToContext(ResourceContextId.LINK_TITLE, "add");
    }

    @Override
    protected void doInit() {
        app = ($application.name$Application) getApplication();
        repo = ($relation.targetEntityModel.simpleName$Repository) app.getRepository($relation.targetEntityModel.className$.class);
        //userRepo = (UserRepository) app.getRepository(io.skysail.server.app.oEService.User.class);
    }

    @Override
    public List<$relation.targetEntityModel.simpleName$> getEntity() {
        Filter filter = new Filter(getRequest());
        Pagination pagination = new Pagination(getRequest(), getResponse(), repo.count(filter));
        return repo.find(filter, pagination);
    }

    @Override
    protected List<$relation.targetEntityModel.simpleName$> getRelationTargets(String selectedValues) {
        Filter filter = new Filter(getRequest());
        Pagination pagination = new Pagination(getRequest(), getResponse(), repo.count(filter));
        return repo.find(filter, pagination);//.stream().filter(predicate);
    }

    @Override
    public void addRelations(List<$relation.targetEntityModel.simpleName$> entities) {
        String id = getAttribute("id");
        $entity.className$ theUser = repo.findOne(id);
        entities.stream().forEach(e -> addIfNotPresentYet(theUser, e));
        repo.save(theUser, getApplication().getApplicationModel());
    }

    private void addIfNotPresentYet($entity.className$ theUser, $relation.targetEntityModel.simpleName$ e) {
        if (!theUser.get$relation.targetEntityModel.simpleName$s().stream().filter(oe -> oe.getId().equals(oe.getId())).findFirst().isPresent()) {
            theUser.get$relation.targetEntityModel.simpleName$s().add(e);
        }
    }



//    @Override
//    public String redirectTo() {
//        return super.redirectTo(UsersResource.class);
//    }
    
    

}
>>