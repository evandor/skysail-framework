mainContent(user, converter, messages, model) ::= <<

  $if(model.showBreadcrumbs)$
    $breadcrumbsRow(model,user)$
  $else$
    <div class="row" style="background-color:#f5f5f5; height:17px;">&nbsp;</div>
  $endif$
  
  <div class="row" $if(converter.debug && user.principal)$style="border:3px solid blue;"$endif$>
    <div class="col-md-2" style="
        min-width:200px;
        min-height:500px;
        text-align: left;
        padding-top:17px;
        margin-top:-21px;
        border-right: 1px dotted #a0a0a0;
        border-top: 1px dotted #a0a0a0;
        background-image: linear-gradient(to bottom,#F5F5F5 0,#F5F5F5 100%) $if(converter.debug && user.principal)$border:3px solid green;$endif$" id="leftMenu">


    <div class="sidebar-nav">
      <ul class="nav nav-list ">
        <li class="nav-header"><i class="fa fa fa-th"> </i>&nbsp; Entities</li>
      </ul>
      <br>
    </div>


    $if(converter.debug && user.principal)$
    <div
      style="border: 3px solid green; position: absolute; bottom: 20px; right: 2px; width: 100px; height: 30px; background-color: white; z-index: 10000; opacity: 0.8">menuNav/jsTreeNav</div>
    $endif$
  </div>
    <div class="col-md-$if(user.demoUser)$8$else$10$endif$" style="border-top: 1px dotted #a0a0a0;margin-top:-21px;">
      <div class="row" style="background-color: #F8FAD4">
        <div class="col-md-12" style="border-bottom: 1px dotted #a0a0a0;">
          $contentHeader(converter, messages, model)$
        </div>
      </div>
      <div class="row">
        <div class="col-md-12"  $if(converter.debug && user.principal)$style="border:3px solid yellow;"$endif$>
            
            
            <div id="myholder" style="border: 1px dotted gray"></div>
            <script type="text/javascript">
          
              var graph = new joint.dia.Graph;
                        
              var paper = new joint.dia.Paper({
                  el: \$('#myholder'),
                  width: '100%',
                  height: '800px',
                  model: graph,
                  gridSize: 10
              });
              
              joint.shapes.html = {};
              joint.shapes.html.Element = joint.shapes.basic.Rect.extend({
                  defaults: joint.util.deepSupplement({
                      type: 'html.Element',
                      attrs: {
                          rect: { stroke: 'none', 'fill-opacity': 0 }
                      }
                  }, joint.shapes.basic.Rect.prototype.defaults)
              });
              
              
              joint.shapes.html.ElementView = joint.dia.ElementView.extend({

            	    template: [
            	        '<div class="html-element">',
            	        '<button class="delete">x</button>',
            	        '<label></label>',
            	        '<hr>',
            	        '<span></span>', '<br/>',
            	        '<select><option>--</option><option>one</option><option>two</option></select>',
            	        '<input type="text" value="I\'m HTML input" />',
            	        '</div>'
            	    ].join(''),

            	    initialize: function() {
            	        _.bindAll(this, 'updateBox');
            	        joint.dia.ElementView.prototype.initialize.apply(this, arguments);

            	        this.\$box = \$(_.template(this.template)());
            	        // Prevent paper from handling pointerdown.
            	        this.\$box.find('input,select').on('mousedown click', function(evt) { evt.stopPropagation(); });
            	        // This is an example of reacting on the input change and storing the input data in the cell model.
            	        this.\$box.find('input').on('change', _.bind(function(evt) {
            	            this.model.set('input', \$(evt.target).val());
            	        }, this));
            	        this.\$box.find('select').on('change', _.bind(function(evt) {
            	            this.model.set('select', \$(evt.target).val());
            	        }, this));
            	        this.\$box.find('select').val(this.model.get('select'));
            	        this.\$box.find('.delete').on('click', _.bind(this.model.remove, this.model));
            	        // Update the box position whenever the underlying model changes.
            	        this.model.on('change', this.updateBox, this);
            	        // Remove the box when the model gets removed from the graph.
            	        this.model.on('remove', this.removeBox, this);

            	        this.updateBox();
            	    },
            	    render: function() {
            	        joint.dia.ElementView.prototype.render.apply(this, arguments);
            	        this.paper.\$el.prepend(this.\$box);
            	        this.updateBox();
            	        return this;
            	    },
            	    updateBox: function() {
            	        // Set the position and dimension of the box so that it covers the JointJS element.
            	        var bbox = this.model.getBBox();
            	        // Example of updating the HTML with a data stored in the cell model.
            	        this.\$box.find('label').text(this.model.get('label'));
            	        this.\$box.find('span').text(this.model.get('select'));
            	        this.\$box.css({ width: bbox.width, height: bbox.height, left: bbox.x, top: bbox.y, transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg)' });
            	    },
            	    removeBox: function(evt) {
            	        this.\$box.remove();
            	    }
            	});

              
              //var el1 = new joint.shapes.html.Element({ position: { x: 80, y: 80 }, size: { width: 170, height: 100 }, label: 'I am HTML', select: 'one' });
              //var el2 = new joint.shapes.html.Element({ position: { x: 370, y: 160 }, size: { width: 170, height: 100 }, label: 'Me too', select: 'two' });
              /*var l = new joint.dia.Link({
                  source: { id: el1.id },
                  target: { id: el2.id },
                  attrs: { '.connection': { 'stroke-width': 5, stroke: '#34495E' } }
              });

              graph.addCells([el1, el2, l]);
          */
            /* 
          
              var link = new joint.dia.Link({
                  source: { id: rect.id },
                  target: { id: rect2.id }
              });*/
              
              var entitiesNodes = [];

              function logArrayElements(element, index, array) {
            	  /*var therect = new joint.shapes.basic.Rect({
                      position: { x: 50 + 100 * index * 3, y: 50 + 30 * index },
                      size: { width: 140, height: 40 },
                      attrs: { 
                    	  rect: { fill: '#bfbfbf', rx: 5, ry: 5, 'stroke-width': 2, stroke: 'black' }, 
                    	  text: { text: element, fill: '#000066', 'font-size': 18, 'font-weight': 'bold' } 
                      }
                  })*/
                  entitiesNodes.push(new joint.shapes.html.Element({ 
                	  position: { x: 50 + 100 * index * 3, y: 50 + 30 * index }, 
                	  size: { width: 190, height: 120 }, 
                	  label: element.name, 
                	  select: 'one' 
                  }));

              }
              var entities = [$entities(model)$];

              entities.forEach(logArrayElements);

              graph.addCells(entitiesNodes);
              
              var l = new joint.dia.Link({
            	    source: { id: entitiesNodes[0].id },
            	    target: { id: entitiesNodes[1].id },
            	    attrs: { '.connection': { 'stroke-width': 5, stroke: '#34495E' } }
            	});
          
              graph.addCells([l]);
          
            </script>
            
            
            

        </div>
      </div>
    </div>
    
  </div>

  <script lang="text/javascript">

    function getDocHeight() {
	    var D = document;
	    return Math.max(
	        D.body.scrollHeight, D.documentElement.scrollHeight,
	        D.body.offsetHeight, D.documentElement.offsetHeight,
	        D.body.clientHeight, D.documentElement.clientHeight
	    );
	}
    var h = window.innerHeight;
    height = (h - 133)+"px";
    if (window.innerWidth > 1000) {
      document.getElementById('leftMenu').style.height = height;
    }
  </script>

>>

entities(model) ::= <<
  $model.data: {row | 
  {
    name: "$row.("name")$"
  \}}; separator=","$
>>