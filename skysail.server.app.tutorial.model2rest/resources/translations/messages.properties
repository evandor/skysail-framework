#Fri Dec 26 06:18:17 CET 2014
de.twenty11.skysail.server.app.tutorial.model2rest.home.TutorialHomeResource.message=renderer:markdown ### Getting Started Guide - An intro example for skysail\r\n\r\nThis guide will help you understand what skysail is about and how to get your feet wet with its concepts. Additionally,you could check out the [demo](http://todos.demo.skysail.io) as well.\r\n\r\nAs syksail is about **creating RESTful applications from domain models**,we&#39;ll show you how a simple &#34;todo&#34; model is extended in six steps to create a running Todo-List application,including validation and persistence.\r\n\r\nYou don&#39;t need to download anything to follow this guide; simply have a look at the models and,if you like,launch the corresponding applications for each step.\r\n\r\n#### The final Model\r\n\r\n![TodoModel](/website/img/TodoModel.png)\r\n\r\n#### Resources\r\n\r\nTo be honest,you need a little bit more than just a model or two to create a useful application. Some glue code is needed to make your model instances behave the way you want. Initially,\u00C2\u00A0this code can be generated. Once you need more sophisticated logic,you&#39;ll take over.\r\n\r\n#### The user interface\r\n\r\nskysails user interface is purely generic and meant to be used by admins,developers and support staff. If you need a client GUI,try some of the fancy javascript frameworks (or anything that supports HTTP) and communicate with the skysail server backend via JSON.
de.twenty11.skysail.server.app.tutorial.model2rest.step1.TodoResource.message=renderer:markdown ### Create Model\r\n\r\n#### Model Definition\r\n\r\nLet&#39;s start with a very simple model:\r\n\r\n&#96;&#96;&#96;&#96;\r\npublic class TodoModel1 {         // 1\r\n\r\n    &#64;Field\t\t\t\t\t\t  // 2\r\n\tprivate String todo;     \r\n    \r\n    (getter and setter omitted)   // 3\r\n}\r\n&#96;&#96;&#96;&#96;\r\n\r\n1. As you can see,\u00A0the model *is* a POJO,&nbsp;a plain old simple java object without any dependencies. *The model does not need to extend or implement any framework class*.\r\n2. What skysail needs,\u00A0though,\u00A0is an annotation to understand that this special field (&#34;todo&#34;) needs to be handled in a specific way. \r\n3. The next examples will make use of [lombok](http://projectlombok.org/) to avoid writing some boilerplate code like getters and setters. Technically,\u00A0skysail doesn&#39;t need lombok,\u00A0but its convenient. You still can write setters and getters by hand of course.\r\n\r\n---------------------\r\n\r\n#### Resulting Application\r\n\r\nskysail creates a RESTful application for your model. So,&nbsp;under &#34;Demo Application&#34;,&nbsp;click the &#34;Launch&#34; link to see the current model &#34;in action&#34;. Not much has yet been defined on your model,&nbsp;so you can *submit* the form,&nbsp;but nothing will happen yet.
de.twenty11.skysail.server.app.tutorial.model2rest.step1.PostTodoResource.message = This is the current Todo-Application based on our first model. The model defines a single field,&#34;Todo&#34;,which is displayed in the form you see below. The text you are reading just now is defined in a resource bundle and put on the form by a naming convention.
de.twenty11.skysail.server.app.tutorial.model2rest.step1.TodoModel1.todo = Todo
de.twenty11.skysail.server.app.tutorial.model2rest.step1.TodoModel1.todo.placeholder =
de.twenty11.skysail.server.app.tutorial.model2rest.step1.TodoModel1.todo.desc = Add some text and submit ;)
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoResource.message=renderer:markdown ### Add Validation\r\n\r\nModels need validation - not all values and their combinations are valid in a specific context. skysail helps you defining constraints using the [JSR 303](https://jcp.org/en/jsr/detail?id&#61;303) standard. Simple predefined constraints can be applied on the field level; more complex ones can be written for the entire bean.\r\n\r\n#### Model Definition\r\n\r\nSo,&nbsp;let&#39;s extend our little model to look like this:\r\n\r\n    &#64;Data                            // 1\r\n    public class TodoModel2 {        // 2\r\n\r\n        &#64;Field\r\n        &#64;Size(min &#61; 3)               // 3    \r\n        private String todo;\r\n        \r\n    }\r\n\r\n1. This is a lombok annotation helping us to write less boilerplate code; as explained in [Step 1](step1) this is not mandatory but convenient. \r\n2. The extended model,\u00A0with some *javax.validation* annotations. \r\n3. The actual annotation,\u00A0letting skysail know that the todo attribute must be a least three characters long.\r\n\r\n------------------\r\n\r\n#### Resulting Application\r\n\r\nCheck it out: click on the &#34;Launch&#34; link and try to create a new Todo with value &#34;A&#34;.
de.twenty11.skysail.server.app.tutorial.model2rest.step2.PostTodoResource.message = The current Todo-Application with added validations:
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoModel2.todo = Todo
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoModel2.todo.placeholder =
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoModel2.todo.desc = Add some text and create a new Todo! Or see what happens if the text is too short.
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoModel2.desc = Description
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoModel2.desc.placeholder = an optional description
de.twenty11.skysail.server.app.tutorial.model2rest.step2.TodoModel2.desc.desc = As there is no validation defined on the model,this field can be empty
de.twenty11.skysail.server.app.tutorial.model2rest.step3.PostTodoResource.message =
de.twenty11.skysail.server.app.tutorial.model2rest.step3.TodoResource.message=renderer:markdown ### Persistence\r\n\r\nModels which cannot be persisted usually are of little value,\u00A0at least when it comes to business models. skysail helps you with creating,\u00A0retrieving,\u00A0altering and deleting your model instances. The best thing about our approach is this: If your models are simple enough,\u00A0you don&#39;t have to write anything to be able to persist them. Ok,\u00A0cheated... You have to give them an ID field ;)\r\n\r\n#### Model Definition\r\n\r\nSo,\u00A0we&#39;ll add an ID field to the business model we have shown in [step 2](step2): \r\n\r\n    &#64;Data                            \r\n    public class TodoModel2 {        \r\n\r\n        &#64;Id                          // 1\r\n        private int id;              // 2\r\n \r\n        &#64;Field\r\n        &#64;Size(min &#61; 3)                   \r\n        private String todo;\r\n    }\r\n    \r\n1. An &#34;ordinary&#34; javax.persistence ID annotation\r\n2. A new field holding the models id. Please note that it is not annotated with &#64;Field,so it will not show up in the form.\r\n\r\nOf course,\u00A0we need some code to actually persist the model. For now,the repository code is not much more than a simple CircularFifoQueue,\u00A0limited to five items.\r\n\r\n----------------------\r\n\r\n#### Resulting Application\r\n\r\nBy now,&nbsp;we can create new Todo instances which are persisted - check it out.
de.twenty11.skysail.server.app.tutorial.model2rest.step3.TodoModel3.todo = Todo
de.twenty11.skysail.server.app.tutorial.model2rest.step3.TodoModel3.todo.placeholder =
de.twenty11.skysail.server.app.tutorial.model2rest.step3.TodoModel3.todo.desc = Add some text and create a new Todo! Or see what happens if the text is too short.
de.twenty11.skysail.server.app.tutorial.model2rest.step3.Step3DemoResource.message = The current list of Todos
de.twenty11.skysail.server.app.tutorial.model2rest.step4.TodoResource.message = renderer:markdown ### Sanitization\r\n\r\nAgain,&nbsp;we&#39;ll change the model in this step a little bit to show you some more of the concepts: \r\n\r\n    &#64;Data\r\n    public class TodoModel4 {\r\n    \r\n        &#64;Id\r\n        private int id; \r\n        \r\n        &#64;Field(htmlPolicy &#61; HtmlPolicy.NO_HTML,type &#61; InputType.TEXTAREA)    // 1 and 2\r\n        private String todo;\r\n        \r\n    }\r\n    \r\n1. The htmlPolicy defines how user input is handled (or sanitized). skysail will try to remove malicious input according to this policy. The default is &#34;NO_HTML&#34;.\r\n2. The default value for the &#64;Field attribute &#34;type&#34; is text - we&#39;ll change this here to show you how to create a textarea.\r\n\r\n#### Resulting Application\r\n\r\nTry to add simple html in this textarea and see what happens. And try writing some javascript as well.\r\n\r\n-------------------------------------------------
de.twenty11.skysail.server.app.tutorial.model2rest.step4.PostTodoResource.message = Now,with this model,we have a Textarea:
de.twenty11.skysail.server.app.tutorial.model2rest.step4.Step4DemoResource.message = The current list of Todos
de.twenty11.skysail.server.app.tutorial.model2rest.step5.TodoResource.message = renderer:markdown ### Extend Model\r\n\r\n#### Model Definition\r\n\r\nIn this step we will extend the model to its final version in this tutorial and reuse it in the steps to come.\r\n\r\nLet&#39;s add a Due-Date-Field and a (calculated) State field,&nbsp;indicating if the Todo is new,&nbsp;pending,&nbsp;done or overdue. \r\n\r\n    &#64;Data\r\n    public class TodoModel {\r\n    \r\n        &#64;Id\r\n        private int id; \r\n        \r\n        &#64;Field\r\n        &#64;Size(min &#61; 3)\r\n        private String todo;\r\n    \r\n        &#64;Field(type &#61; InputType.TEXTAREA)\r\n        private String desc;\r\n    \r\n        &#64;Field\r\n        private Date due;\r\n        \r\n        private State state;\r\n    }\r\n\r\n\r\n#### Resulting Application\r\n\r\nLaunch it!\r\n\r\n------------------
de.twenty11.skysail.server.app.tutorial.model2rest.step5.Step5DemoResource.message = Our model now has a couple of attributes of different types.
de.twenty11.skysail.server.app.tutorial.model2rest.step6.TodoResource.message = renderer:markdown ### Check Integration\r\n\r\nIf an application is only accessible with a browser,\u00A0you loose a lot of opportunities for decent integration with other applications. So,\u00A0while skysail provides a generic GUI to interact with your model instances,\u00A0skysail also let&#39;s you interact via JSON without any additional effort.\r\n\r\n#### Json Post\r\n\r\nThe simplest integration setup is to utilize curl to send a new Todo to the skysail server like this: \r\n\r\n&#96;&#96;&#96;\r\ncurl -H &#34;Content-Type: application/json&#34; -d &#39;{&#34;todo&#34;:&#34;xyz&#34;,&#34;desc&#34;:&#34;mydesc&#34;}&#39; http://www.skysail.io/tutorialM2R/step5/\r\n\r\n&#96;&#96;&#96;\r\n\r\nIf you have curl installed,\u00A0you can run this from the command line and you will see (once the page has been refreshed) a new entry in the JSON Get representation below.\r\n\r\n#### Json Get
de.twenty11.skysail.server.app.tutorial.model2rest.conclusion.ConclusionResource.message = renderer:markdown ### Conclusion\r\n\r\nWe hope you got an idea of what skysail is about. But we&#39;re just getting started... There are a lot of topics we didn&#39;t cover yet. Some of them are already being tackled,\u00A0others are on the roadmap.\r\n\r\n#### User Management\r\n\r\nA proper Todo Application needs some kind of user management - who is the owner of a Todo,\u00A0who is currently responsible,\u00A0who has access to which Todos and the like. We will provide a Todo Demo Application to show you how these issues can be handled with skysail.\r\n\r\n*Status*: Proof of concept\r\n\r\n#### Documentation\r\n\r\nskysail exposes models as RESTful applications; that means you get an API which let&#39;s you interact with the models. This API needs documentation to be truely useful,\u00A0and this documentation can be generated automatically from the information on the model. \r\n\r\n*Status*: Proof of concept\r\n\r\n#### Configuration\r\n\r\nAn application needs to be configured - where is the database,&nbsp;how to access the mail server,&nbsp;what port should it run at and so on. \r\n\r\n*Status*: alpha
