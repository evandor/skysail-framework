Content

 This section describes the fundamental features and the purpose of skysail server in a bit more detail.
 
 You might have read the 10.000 feet overview page already. Zooming in, we see some more details.
 
* Visualizing skysail "from 1.000 feet" will give you something like this:
 
=======================================================================
 
[../skysail_server_level_B.png] 1.000 feet view  

=======================================================================
 
 As from {{{./overview.html}10.000 feet}}, skysail server waits for <REST requests>. The processing of the request happens in three steps:
 
  * Finding the <<matching resource>> (using {{{http://www.restlet.org}restlet}} routing)
  
  * Applying the <<business logic>> (see ...), creating a skysail response.
  
  * Converting the <<response>> into the expected format (via the {{{http://www.restlet.org}restlet}} conversion mechanism)
  
 General concerns like authentication, authorization, logging and others are taken care of in the proper step; for example,
 authentication will happen early (in the first step, before even reaching the resource if not authenticated). Authorization,
 on the other hand, might be something the business logic will deal with. Augmenting the response, for examples with links and
 commands the current user has access to might happen in step three. 
 
 
* Summary

 skysail server gives answers to requests in a very generic way: Depending on the request, the matching "resource" is asked to perform
 its business logic, and the result is adapted to the required format. 
 
 This is a lot like what happens in the usual JEE stack you might think: depending on the URL of the request, a specific servlet 
 is chosen to perform some logic, typically utilizing some form of the model-view-control pattern (MVC). But there are two main 
 differences:
 
  * The request is expected to be conform to REST
  
  * The response is a generic object which gets transformed to the desired format automatically. 
 
 Digging in a bit deeper (see the other sections) you will see that
 
  * There is <<no need of the MVC pattern>>, as there is no view. To be more precise, there is only one generic view for all
    skysail-server-created responses (and this view typically is something your admin will see, not your customers).
    
  * There is <<no need for state>> (yeah, it's based on REST). So, no session on the server side (no scope decisions, no cluster
    replication of sessions, ...)
    
  * No "view" in MVC makes the controller itself pretty unnecessary, so what you are left with is the model. The model represents the
    business, and is best expressed as a domain model like it is 
    described in {{{http://en.wikipedia.org/wiki/Domain-driven_design}Domain-Driven design}}). In essence, skysail supports you 
    concentrating on the business aspects of your application.
    
  * But I want a great user interface! What's been said so far is not a contradiction to this requirement. It should just happen
    outside skysail server and just communicate with the backend to supply and update the actual data. 


 
 
 
 