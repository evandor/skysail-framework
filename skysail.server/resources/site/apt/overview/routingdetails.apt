 -----
 Routing Details
 -----
 evandor
 -----
 October 2013

Content

 This section describes some details of how resources are found and what kind of logic is performed "on the way".
 This section is pretty low-level and might not be relevant to you if you want to use only skysail standard features,
 but it could give you some insights if you want to extend, adjust or understand skysail server. 
 
* Defining a route

 As mentioned before, routing means to find the matching resource for a given URL and is handled
 by the excellent {{{http://www.restlet.org}Restlet}} framework. This page will describe a typical route from 
 a request (here: <<GET http://localhost:2014/notes/folders/?media=htmlform>>) to the actual resource dealing with it.
 
 Let's suppose there's a skysail application called "<<notes>>" defining a router with an attached resource:
  
+---
...
router.attach("/folders/", FolderResource.class);
...
+---   

* Request Processing with Filters (and "Restlets")

 In order to understand how a request is handled by skysail or restlet it is important to have a look at
 {{{}filters}}. The central method for a Filter is
 
+---
    public final void handle(Request request, Response response) {...}
+---

 which is defined in the <org.restlet.Uniform> interface.

 In this method, the processing happens like the following:
 
 * <<Pre-Processing>> (Method: <beforeHandle(request, response)>)
 
 * <<Processing>> (Method: <doHandle(request, response)>)
 
 * <<Post-Processing>> (Method: <afterHandle(request, response)>)

[] 

 To be precise, not all classes involved in the processing are technically filters; but they all derive from the same 
 <org.restlet.Uniform> interface. Deriving from Uniform they all have a <handle(request, response)> method, but they 
 generally do not perform any pre- or postprocessing. Those classes, including Filter, extend <org.restlet.Restlet> and
 have another thing in common: They have to know about the <next restlet> in line, so that they can invoke it to continue
 with the processing chain. In some cases, this next restlet has been configured, in other cases it has to be calculated.
  
 A request will go through a lot of different filters (or restlets) until it reaches it's destination, a specific resource. 
 And then, it will go back the whole chain of "afterHandle" methods until the response is completely constructed and sent back to 
 the caller.
 
 Each filter will apply its own logic to deal with various aspects of the request handling; some do mostly pre- and post-processing,
 others filters main task is executed in the doHandle method (as it is the case with restlets). Each filter or restlet can interfere 
 with the request and stop further execution by returning the appropriate code (like "SKIP" or "STOP"). 
 
 This is, for example, how an authentication filter can stop un-authorized calls and generically redirect to the login page. 
 
=======================================================================

[../filters.png] Filters

=======================================================================

* Request Handling in skysail server
 
 Back to our example with the GET request to http://localhost:2014/notes/folders/?media=htmlform.

 What happens inside restlet and skysail?

 This is a list of the invoked filters or restlets with a little description of what's happening in each of them:
 
 
--------------------- 

 Server >> 
     Component >> 
         ComponentHelper >> 
			...
--------------------- 
 
 
 
** org.restlet.Server (extends Connector (extends Restlet))

*--------------------*--------------+--------:
| <<Javadoc>>        | Connector acting as a generic server. It internally uses one of the available connector helpers registered with the Restlet engine.     |        |
*--------------------*--------------+--------:
| <<Description>>    | Calls Restlets handle method to take care of lifecycle and context. Invokes the next filter, which is (in skysail server) a SkysailComponent instance.   |        |
*--------------------*--------------+--------:
| <<"Next restlet">> | The "next restlet" is set in code when calling de.twenty11.skysail.server.config.ServerConfigurationImpl.startStandaloneServer(String, Component);     |        |
*--------------------*--------------+--------:
| <<Server#handle>>  | redirects to super.handle() and then calls getNext().handle(request,response)     |        |
*--------------------*--------------+--------:
 
** de.twenty11.skysail.server.SkysailComponent (extends Component)

*--------------------*--------------+--------:
| <<Javadoc>>        | "Restlet managing a set of Connectors, VirtualHosts, Services and Applications"     |        |
*--------------------*--------------+--------:
| <<Description>>    |      |        |
*--------------------*--------------+--------:
| <<"Next restlet">> | The next restlet is of type ComponentHelper and created in the Component constructor     |        |
*--------------------*--------------+--------:
| <<Server#handle>>  | redirects to super.handle() and then calls getHelper().handle(request,response)     |        |
*--------------------*--------------+--------:
 
** org.restlet.engine.component.ComponentHelper (extends CompositeHelper)

*--------------------*--------------+--------:
| <<Javadoc>>        |      |        |
*--------------------*--------------+--------:
| <<Description>>    |      |        |
*--------------------*--------------+--------:
| <<"Next restlet">> |      |        |
*--------------------*--------------+--------:
| <<Server#handle>>  |      |        |
*--------------------*--------------+--------:

*--------------------*--------------+--------:
| <<Javadoc>>        |      |        |
*--------------------*--------------+--------:
| <<Description>>    |      |        |
*--------------------*--------------+--------:
| <<"Next restlet">> |      |        |
*--------------------*--------------+--------:
| <<Server#handle>>  |      |        |
*--------------------*--------------+--------:
 